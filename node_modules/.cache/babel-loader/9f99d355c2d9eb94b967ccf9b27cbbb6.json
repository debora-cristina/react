{"ast":null,"code":"import _objectSpread from \"D:\\\\react\\\\App\\\\first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\react\\\\App\\\\first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\react\\\\App\\\\first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\react\\\\App\\\\first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\react\\\\App\\\\first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\react\\\\App\\\\first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\react\\\\App\\\\first-react-app\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button.js';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders.js';\nimport Spinner from '../../../components/UI/Spinner/Spinner.js';\nimport Input from '../../../components/UI/Input/Input';\n\nvar ContactData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactData, _Component);\n\n  function ContactData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Zipcode'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: '',\n          validation: {},\n          valid: true\n        }\n      },\n      loading: false,\n      formIsValid: false\n    };\n\n    _this.orderHandler = function (event) {\n      _this.setState({\n        loading: true\n      });\n\n      event.preventDefault();\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      console.log(formData);\n      var order = {\n        ingredients: _this.props.ingredients,\n        price: _this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(function (response) {\n        _this.setState({\n          loading: false,\n          purchasing: false\n        });\n\n        _this.props.history.push('/');\n      }).catch(function (error) {\n        _this.setState({\n          loading: false,\n          purchasing: false\n        });\n      });\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updateOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updateFormElement = _objectSpread({}, updateOrderForm[inputIdentifier]);\n\n      updateFormElement.value = event.target.value;\n      updateFormElement.valid = _this.checkValidity(updateFormElement.value, updateFormElement.validation);\n      updateFormElement.touched = true;\n      updateOrderForm[inputIdentifier] = updateFormElement;\n      var formIsValid = true;\n\n      for (var inputIdentifiers in updateFormElement) {\n        formIsValid = updateFormElement[inputIdentifier].valid && formIsValid;\n      }\n\n      _this.setState({\n        orderForm: updateOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.checkValidity = function (value, rules) {\n      var isValid = true;\n\n      if (!rules) {\n        return true;\n      }\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        className: classes.Input,\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, formElementArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formIsValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"ORDER\"));\n\n      if (this.state.loading) {\n        form = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: classes.ContactData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, \"Enter your Contact Data\"), form);\n    }\n  }]);\n\n  return ContactData;\n}(Component);\n\nexport default ContactData;","map":{"version":3,"sources":["D:\\react\\App\\first-react-app\\src\\containers\\Checkout\\ContactData\\ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","loading","formIsValid","orderHandler","event","setState","preventDefault","formData","formElementIdentifier","console","log","order","ingredients","props","price","orderData","post","then","response","purchasing","history","push","catch","error","inputChangedHandler","inputIdentifier","updateOrderForm","updateFormElement","target","checkValidity","inputIdentifiers","rules","isValid","trim","length","formElementArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button.js';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders.js';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner.js';\r\nimport Input from '../../../components/UI/Input/Input';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n                name: {\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Your Name'\r\n                    },\r\n                    value:'',\r\n                    validation: {\r\n                        required:true\r\n                    },\r\n                    valid: false,\r\n                    touched:false\r\n                },\r\n                street:{\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Street'\r\n                    },\r\n                    value:'',\r\n                    validation: {\r\n                        required:true\r\n                    },\r\n                    valid: false,\r\n                    touched:false\r\n                },\r\n                zipCode: {\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Zipcode'\r\n                    },\r\n                    value:'',\r\n                    validation: {\r\n                        required:true,\r\n                        minLength:5,\r\n                        maxLength:5\r\n                    },\r\n                    valid: false,\r\n                    touched:false\r\n                },\r\n                country:{\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Country'\r\n                    },\r\n                    value:'',\r\n                    validation: {\r\n                        required:true\r\n                    },\r\n                    valid: false,\r\n                    touched:false\r\n                },\r\n                email: {\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type:'email',\r\n                        placeholder:'Email'\r\n                    },\r\n                    value:'',\r\n                    validation: {\r\n                        required:true\r\n                    },\r\n                    valid: false,\r\n                    touched:false\r\n                },\r\n                deliveryMethod: {\r\n                    elementType: 'select',\r\n                    elementConfig:{\r\n                        options: [\r\n                            {value:'fastest', displayValue:'Fastest'},\r\n                            {value:'cheapest', displayValue:'Cheapest'}\r\n                        ]\r\n                    },\r\n                    value:'',\r\n                    validation: {},\r\n                    valid:true\r\n                }         \r\n        },\r\n        loading: false,\r\n        formIsValid: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        this.setState({ loading: true });\r\n        event.preventDefault();\r\n        let formData = {};\r\n\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n        console.log(formData);\r\n\r\n        const order = {\r\n            ingredients: this.props.ingredients,\r\n            price: this.props.price,\r\n            orderData: formData\r\n        }\r\n\r\n        axios.post('/orders.json', order)\r\n            .then(response => {\r\n                this.setState({ loading: false, purchasing: false });\r\n                this.props.history.push('/');\r\n            }).catch(error => {\r\n                this.setState({ loading: false, purchasing: false });\r\n\r\n            });\r\n\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updateOrderForm = {\r\n            ...this.state.orderForm\r\n        };\r\n\r\n        const updateFormElement = {\r\n            ...updateOrderForm[inputIdentifier]\r\n        };\r\n\r\n        updateFormElement.value = event.target.value;\r\n        updateFormElement.valid = this.checkValidity(updateFormElement.value,updateFormElement.validation);\r\n        updateFormElement.touched = true;\r\n        updateOrderForm[inputIdentifier] = updateFormElement;\r\n        \r\n        let formIsValid = true;\r\n\r\n        for(let inputIdentifiers in updateFormElement){\r\n            formIsValid =  updateFormElement[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({orderForm: updateOrderForm, formIsValid: formIsValid  });\r\n\r\n        \r\n\r\n    }\r\n\r\n    checkValidity = (value,rules) => {\r\n        let isValid = true;\r\n\r\n        if(!rules){\r\n            return true;\r\n        }\r\n        \r\n        if(rules.required){\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if(rules.minLength){\r\n            isValid = value.length >= rules.minLength  && isValid\r\n        }\r\n\r\n        if(rules.maxLength){\r\n            isValid = value.length <= rules.maxLength  && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    render() {\r\n        const formElementArray = [];\r\n\r\n        for(let key in this.state.orderForm){\r\n                formElementArray.push({\r\n                    id:key,\r\n                    config: this.state.orderForm[key]\r\n                })\r\n        }\r\n\r\n        let form = (\r\n        <form className={classes.Input} onSubmit={this.orderHandler}>\r\n            {formElementArray.map(formElement =>(\r\n                <Input \r\n                    key= {formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    invalid = {!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched= {formElement.config.touched}\r\n                    changed={ (event) => this.inputChangedHandler(event, formElement.id)}\r\n                />\r\n            ))}\r\n            <Button btnType=\"Success\" \r\n                disabled={!this.state.formIsValid}>ORDER</Button>\r\n        </form>);\r\n        if (this.state.loading) {\r\n            form = <Spinner></Spinner>\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}