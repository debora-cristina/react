{"ast":null,"code":"import _objectSpread from \"D:\\\\react\\\\App\\\\first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\react\\\\App\\\\first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\react\\\\App\\\\first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\react\\\\App\\\\first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\react\\\\App\\\\first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\react\\\\App\\\\first-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\react\\\\App\\\\first-react-app\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button.js';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders.js';\nimport Spinner from '../../../components/UI/Spinner/Spinner.js';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\n\nvar ContactData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactData, _Component);\n\n  function ContactData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Zipcode'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5,\n            isNumeric: true\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {},\n          valid: true\n        }\n      },\n      loading: false,\n      formIsValid: false\n    };\n\n    _this.orderHandler = function (event) {\n      console.log(\"order\");\n\n      _this.setState({\n        loading: true\n      });\n\n      event.preventDefault();\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      console.log(formData);\n      var order = {\n        ingredients: _this.props.ings,\n        price: _this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(function (response) {\n        _this.setState({\n          loading: false,\n          purchasing: false\n        });\n\n        _this.props.history.push('/');\n      }).catch(function (error) {\n        _this.setState({\n          loading: false,\n          purchasing: false\n        });\n      });\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updateOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updateFormElement = _objectSpread({}, updateOrderForm[inputIdentifier]);\n\n      updateFormElement.value = event.target.value;\n      updateFormElement.valid = _this.checkValidity(updateFormElement.value, updateFormElement.validation);\n      updateFormElement.touched = true;\n      updateOrderForm[inputIdentifier] = updateFormElement;\n      var formIsValid = true;\n\n      for (var _inputIdentifier in updateFormElement) {\n        formIsValid = updateFormElement[_inputIdentifier].valid && formIsValid;\n      }\n\n      _this.setState({\n        orderForm: updateOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.checkValidity = function (value, rules) {\n      var isValid = true;\n\n      if (!rules) {\n        return true;\n      }\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      if (rules.isEmail) {\n        var pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test(value) && isValid;\n      }\n\n      if (rules.isNumeric) {\n        var _pattern = /^\\d+$/;\n        isValid = _pattern.test(value) && isValid;\n      }\n\n      console.log(isValid);\n      return isValid;\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        className: classes.Input,\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, formElementArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formIsValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"ORDER\"));\n\n      if (this.state.loading) {\n        form = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: classes.ContactData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, \"Enter your Contact Data\"), form);\n    }\n  }]);\n\n  return ContactData;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    ings: state.ingredients,\n    price: state.totalPrice\n  };\n};\n\nexport default connect(mapStateToProps)(ContactData);","map":{"version":3,"sources":["D:\\react\\App\\first-react-app\\src\\containers\\Checkout\\ContactData\\ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","connect","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","loading","formIsValid","orderHandler","event","console","log","setState","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","post","then","response","purchasing","history","push","catch","error","inputChangedHandler","inputIdentifier","updateOrderForm","updateFormElement","target","checkValidity","rules","isValid","trim","length","pattern","test","formElementArray","key","id","config","form","map","formElement","mapStateToProps","totalPrice"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button.js';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders.js';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner.js';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport {connect} from 'react-redux';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n                name: {\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Your Name'\r\n                    },\r\n                    value:'',\r\n                    validation: {\r\n                        required:true\r\n                    },\r\n                    valid: false,\r\n                    touched:false\r\n                },\r\n                street:{\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Street'\r\n                    },\r\n                    value:'',\r\n                    validation: {\r\n                        required:true\r\n                    },\r\n                    valid: false,\r\n                    touched:false\r\n                },\r\n                zipCode: {\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Zipcode'\r\n                    },\r\n                    value:'',\r\n                    validation: {\r\n                        required:true,\r\n                        minLength:5,\r\n                        maxLength:5,\r\n                        isNumeric: true\r\n                    },\r\n                    valid: false,\r\n                    touched:false\r\n                },\r\n                country:{\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Country'\r\n                    },\r\n                    value:'',\r\n                    validation: {\r\n                        required:true\r\n                    },\r\n                    valid: false,\r\n                    touched:false\r\n                },\r\n                email: {\r\n                    elementType: 'input',\r\n                    elementConfig:{\r\n                        type:'email',\r\n                        placeholder:'Email'\r\n                    },\r\n                    value:'',\r\n                    validation: {\r\n                        required:true,\r\n                        isEmail: true\r\n                    },\r\n                    valid: false,\r\n                    touched:false\r\n                },\r\n                deliveryMethod: {\r\n                    elementType: 'select',\r\n                    elementConfig:{\r\n                        options: [\r\n                            {value:'fastest', displayValue:'Fastest'},\r\n                            {value:'cheapest', displayValue:'Cheapest'}\r\n                        ]\r\n                    },\r\n                    value:'fastest',\r\n                    validation: {},\r\n                    valid:true\r\n                }         \r\n        },\r\n        loading: false,\r\n        formIsValid: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        console.log(\"order\");\r\n        this.setState({ loading: true });\r\n        event.preventDefault();\r\n        let formData = {};\r\n\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n        console.log(formData);\r\n\r\n        const order = {\r\n            ingredients: this.props.ings        ,\r\n            price: this.props.price,\r\n            orderData: formData\r\n        }\r\n\r\n        axios.post('/orders.json', order)\r\n            .then(response => {\r\n                this.setState({ loading: false, purchasing: false });\r\n                this.props.history.push('/');\r\n            }).catch(error => {\r\n                this.setState({ loading: false, purchasing: false });\r\n\r\n            });\r\n\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updateOrderForm = {\r\n            ...this.state.orderForm\r\n        };\r\n\r\n        const updateFormElement = {\r\n            ...updateOrderForm[inputIdentifier]\r\n        };\r\n\r\n        updateFormElement.value = event.target.value;\r\n        updateFormElement.valid = this.checkValidity(updateFormElement.value,updateFormElement.validation);\r\n        updateFormElement.touched = true;\r\n        updateOrderForm[inputIdentifier] = updateFormElement;\r\n        \r\n        let formIsValid = true;\r\n\r\n        for(let inputIdentifier in updateFormElement){\r\n            formIsValid =  updateFormElement[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({orderForm: updateOrderForm, formIsValid: formIsValid  });\r\n\r\n        \r\n\r\n    }\r\n\r\n    checkValidity = (value,rules) => {\r\n        \r\n        let isValid = true;\r\n\r\n        if(!rules){\r\n            return true;\r\n        }\r\n        \r\n        if(rules.required){\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if(rules.minLength){\r\n            isValid = value.length >= rules.minLength  && isValid\r\n        }\r\n\r\n        if(rules.maxLength){\r\n            isValid = value.length <= rules.maxLength  && isValid\r\n        }\r\n\r\n        if (rules.isEmail) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        if (rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        console.log(isValid);\r\n\r\n\r\n        return isValid;\r\n    }\r\n\r\n    render() {\r\n        const formElementArray = [];\r\n\r\n        for(let key in this.state.orderForm){\r\n                formElementArray.push({\r\n                    id:key,\r\n                    config: this.state.orderForm[key]\r\n                })\r\n        }\r\n\r\n        let form = (\r\n        <form className={classes.Input} onSubmit={this.orderHandler}>\r\n            {formElementArray.map(formElement =>(\r\n                <Input \r\n                    key= {formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    invalid = {!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched= {formElement.config.touched}\r\n                    changed={ (event) => this.inputChangedHandler(event, formElement.id)}\r\n                />\r\n            ))}\r\n            <Button btnType=\"Success\" \r\n                disabled={!this.state.formIsValid}>ORDER</Button>\r\n        </form>);\r\n        if (this.state.loading) {\r\n            form = <Spinner></Spinner>\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        ings: state.ingredients,\r\n        price:state.totalPrice\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(ContactData);"]},"metadata":{},"sourceType":"module"}